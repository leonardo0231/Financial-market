"""
SQLAlchemy ORM Models for Trading Bot Database
Professional-grade models with proper relationships and constraints
"""

import logging
from datetime import datetime, timezone
from typing import Optional, Dict, Any

from sqlalchemy import Column, Integer, String, DateTime, Float, Boolean, Text, ForeignKey, Index, UniqueConstraint
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import relationship, validates
from sqlalchemy.dialects.postgresql import JSON
import uuid

logger = logging.getLogger(__name__)
Base = declarative_base()

class BaseModel:
    """Base model with common fields and methods"""
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), nullable=False)
    updated_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), 
                       onupdate=lambda: datetime.now(timezone.utc), nullable=False)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert model to dictionary"""
        return {
            column.name: getattr(self, column.name)
            for column in self.__table__.columns
        }

class Trade(Base, BaseModel):
    """Trade execution records with comprehensive tracking"""
    
    __tablename__ = 'trades'
    
    # Trade identification
    trade_id = Column(String(50), unique=True, nullable=False, index=True)
    ticket = Column(String(50), unique=True, nullable=True, index=True)  # MT5 ticket number
    
    # Trade details
    symbol = Column(String(20), nullable=False, index=True)
    signal_type = Column(String(10), nullable=False)  # BUY, SELL
    volume = Column(Float, nullable=False)
    
    # Price levels
    entry_price = Column(Float, nullable=False)
    stop_loss = Column(Float, nullable=True)
    take_profit = Column(Float, nullable=True)
    exit_price = Column(Float, nullable=True)
    
    # Timing
    entry_time = Column(DateTime(timezone=True), nullable=False, index=True)
    exit_time = Column(DateTime(timezone=True), nullable=True, index=True)
    
    # Status and results
    status = Column(String(20), nullable=False, default='OPEN', index=True)  # OPEN, CLOSED, CANCELLED
    profit_loss = Column(Float, nullable=True)
    profit_loss_pips = Column(Float, nullable=True)
    commission = Column(Float, nullable=True, default=0.0)
    swap = Column(Float, nullable=True, default=0.0)
    
    # Strategy information
    strategy_name = Column(String(50), nullable=False, index=True)
    strategy_signal_strength = Column(Float, nullable=True)
    strategy_confidence = Column(Float, nullable=True)
    
    # Risk management
    risk_percent = Column(Float, nullable=True)
    risk_amount = Column(Float, nullable=True)
    risk_reward_ratio = Column(Float, nullable=True)
    
    # Market conditions
    market_volatility = Column(Float, nullable=True)
    spread = Column(Float, nullable=True)
    
    # Additional metadata
    extra = Column(JSON, nullable=True)
    notes = Column(Text, nullable=True)
    
    # Constraints and indexes
    __table_args__ = (
        Index('idx_trades_symbol_time', 'symbol', 'entry_time'),
        Index('idx_trades_strategy_status', 'strategy_name', 'status'),
        Index('idx_trades_performance', 'profit_loss', 'risk_reward_ratio'),
    )
    
    @validates('signal_type')
    def validate_signal_type(self, key, signal_type):
        assert signal_type in ['BUY', 'SELL'], "Signal type must be BUY or SELL"
        return signal_type
    
    @validates('status')
    def validate_status(self, key, status):
        assert status in ['OPEN', 'CLOSED', 'CANCELLED'], "Invalid trade status"
        return status
    
    @validates('volume')
    def validate_volume(self, key, volume):
        assert volume > 0, "Volume must be positive"
        return volume

class Signal(Base, BaseModel):
    """Trading signals generated by strategies"""
    
    __tablename__ = 'signals'
    
    # Signal identification
    signal_id = Column(String(100), unique=True, nullable=False, index=True)
    
    # Signal details
    symbol = Column(String(20), nullable=False, index=True)
    signal_type = Column(String(10), nullable=False)
    strategy_name = Column(String(50), nullable=False, index=True)
    
    # Signal strength and confidence
    strength = Column(Float, nullable=False)
    confidence = Column(Float, nullable=False)
    
    # Price levels
    entry_price = Column(Float, nullable=False)
    stop_loss = Column(Float, nullable=False)
    take_profit = Column(Float, nullable=False)
    
    # Market analysis
    market_condition = Column(String(50), nullable=True)
    volatility = Column(Float, nullable=True)
    trend_direction = Column(String(20), nullable=True)
    
    # Execution status
    executed = Column(Boolean, default=False, index=True)
    execution_time = Column(DateTime(timezone=True), nullable=True)
    rejection_reason = Column(Text, nullable=True)
    
    # Risk parameters
    suggested_volume = Column(Float, nullable=True)
    risk_reward_ratio = Column(Float, nullable=True)
    
    # Related trade
    trade_id = Column(String(50), ForeignKey('trades.trade_id'), nullable=True)
    
    # Additional data
    technical_indicators = Column(JSON, nullable=True)
    extra = Column(JSON, nullable=True)
    
    # Indexes
    __table_args__ = (
        Index('idx_signals_strategy_time', 'strategy_name', 'created_at'),
        Index('idx_signals_execution', 'executed', 'execution_time'),
        Index('idx_signals_strength', 'strength', 'confidence'),
    )

class Performance(Base, BaseModel):
    """Overall system performance tracking"""
    
    __tablename__ = 'performance'
    
    # Time period
    date = Column(DateTime(timezone=True), nullable=False, index=True)
    period_type = Column(String(20), nullable=False, index=True)  # DAILY, WEEKLY, MONTHLY
    
    # Trading metrics
    total_trades = Column(Integer, default=0)
    winning_trades = Column(Integer, default=0)
    losing_trades = Column(Integer, default=0)
    win_rate = Column(Float, default=0.0)
    
    # Profit metrics
    gross_profit = Column(Float, default=0.0)
    gross_loss = Column(Float, default=0.0)
    net_profit = Column(Float, default=0.0)
    profit_factor = Column(Float, default=0.0)
    
    # Account metrics
    starting_balance = Column(Float, nullable=False)
    ending_balance = Column(Float, nullable=False)
    max_balance = Column(Float, nullable=False)
    min_balance = Column(Float, nullable=False)
    
    # Risk metrics
    max_drawdown = Column(Float, default=0.0)
    max_drawdown_percent = Column(Float, default=0.0)
    avg_trade_return = Column(Float, default=0.0)
    
    # Statistical metrics
    sharpe_ratio = Column(Float, default=0.0)
    sortino_ratio = Column(Float, default=0.0)
    calmar_ratio = Column(Float, default=0.0)
    
    # Indexes
    __table_args__ = (
        Index('idx_performance_period', 'period_type', 'date'),
        UniqueConstraint('date', 'period_type', name='uq_performance_date_period'),
    )